rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      allow create: if isAuthenticatedOwner(userId) && isValidUserCreate();
      allow read: if request.auth != null;
      allow update: if (isAuthenticatedOwner(userId) && isValidUserUpdate()) || isAdmin();
      allow delete: if isAdmin();
    }

    match /chatMessages/{messageId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null &&
                      request.resource.data.userId == request.auth.uid &&
                      request.resource.data.message is string &&
                      request.resource.data.message.size() > 0 &&
                      request.resource.data.message.size() <= 250;
      allow update, delete: if false;
    }

    match /{document=**} {
      allow read, write: if false;
    }
  }

  function isAuthenticatedOwner(userId) {
    return request.auth != null && request.auth.uid == userId;
  }

  function isAdmin() {
    return request.auth != null &&
           exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
           get(/databases/$(database)/documents/users/$(request.auth.uid)).data.admin == 1;
  }

  function allowedUserFields() {
    return [
      'email',
      'createdAt',
      'balance',
      'totalWagered',
      'totalWon',
      'gamesPlayed',
      'diceGamesPlayed',
      'diceWins',
      'diceLosses',
      'diceBestWin',
      'plinkoGamesPlayed',
      'plinkoTotalWon',
      'plinkoBestWin',
      'blackjackHandsPlayed',
      'blackjackWins',
      'blackjackBlackjacks',
      'blackjackTotalProfit',
      'minesGamesPlayed',
      'minesCashouts',
      'minesBestMultiplier',
      'minesTotalProfit',
      'towerGamesPlayed',
      'towerCashouts',
      'towerBestMultiplier',
      'towerTotalProfit',
      'totalWager',
      'rakebackAvailable',
      'totalRakebackEarned',
      'lastRakebackClaim',
      'admin'
    ];
  }

  function requiredUserFields() {
    return [
      'balance',
      'totalWagered',
      'totalWon',
      'gamesPlayed'
    ];
  }

  function hasAllowedKeys() {
    return request.resource.data.keys().hasOnly(allowedUserFields());
  }

  function isNonNegativeNumber(field) {
    return request.resource.data[field] is number &&
           request.resource.data[field] >= 0;
  }

  function isNonNegativeInt(field) {
    return request.resource.data[field] is int &&
           request.resource.data[field] >= 0;
  }

  function isNumber(field) {
    return request.resource.data[field] is number;
  }

  function hasValidNumberFields() {
    return isNonNegativeNumber('balance') &&
           isNonNegativeNumber('totalWagered') &&
           isNonNegativeNumber('totalWon') &&
           isNonNegativeInt('gamesPlayed');
  }

  function hasValidCreateMetadata() {
    return (request.resource.data.email == null ||
            (request.resource.data.email is string &&
             (request.auth.token.email == null ||
              request.auth.token.email == request.resource.data.email)));
  }

  function hasValidAdminField() {
    return !request.resource.data.keys().hasAny(['admin']) ||
           (request.resource.data.admin is int &&
            (request.resource.data.admin == 0 || request.resource.data.admin == 1));
  }

  function canModifyAdminField() {
    return !request.resource.data.keys().hasAny(['admin']) ||
           (resource.data.admin == request.resource.data.admin) ||
           isAdmin();
  }

  function isValidUserCreate() {
    return hasAllowedKeys() &&
           hasValidNumberFields() &&
           hasValidCreateMetadata() &&
           hasValidAdminField() &&
           (!request.resource.data.keys().hasAny(['admin']) || request.resource.data.admin == 0);
  }

  function isValidUserUpdate() {
    return hasAllowedKeys() &&
           hasValidNumberFields() &&
           hasValidAdminField() &&
           canModifyAdminField();
  }
}
