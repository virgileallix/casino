rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /users/{userId} {
      allow create: if isAuthenticatedOwner(userId) && isValidUserCreate();
      allow read: if isAuthenticatedOwner(userId);
      allow update: if isAuthenticatedOwner(userId) && isValidUserUpdate();
      allow delete: if false;
    }

    match /{document=**} {
      allow read, write: if false;
    }
  }

  function isAuthenticatedOwner(userId) {
    return request.auth != null && request.auth.uid == userId;
  }

  function allowedUserFields() {
    return [
      'email',
      'createdAt',
      'balance',
      'totalWagered',
      'totalWon',
      'gamesPlayed',
      'diceGamesPlayed',
      'diceWins',
      'diceLosses',
      'diceBestWin',
      'plinkoGamesPlayed',
      'plinkoTotalWon',
      'plinkoBestWin',
      'blackjackHandsPlayed',
      'blackjackWins',
      'blackjackBlackjacks',
      'blackjackTotalProfit',
      'minesGamesPlayed',
      'minesCashouts',
      'minesBestMultiplier',
      'minesTotalProfit'
    ];
  }

  function requiredUserFields() {
    return [
      'email',
      'createdAt',
      'balance',
      'totalWagered',
      'totalWon',
      'gamesPlayed',
      'diceGamesPlayed',
      'diceWins',
      'diceLosses',
      'diceBestWin',
      'plinkoGamesPlayed',
      'plinkoTotalWon',
      'plinkoBestWin',
      'blackjackHandsPlayed',
      'blackjackWins',
      'blackjackBlackjacks',
      'blackjackTotalProfit',
      'minesGamesPlayed',
      'minesCashouts',
      'minesBestMultiplier',
      'minesTotalProfit'
    ];
  }

  function hasAllowedKeys() {
    return request.resource.data.keys().hasOnly(allowedUserFields()) &&
           request.resource.data.keys().hasAll(requiredUserFields());
  }

  function isNonNegativeNumber(field) {
    return request.resource.data[field] is number &&
           request.resource.data[field] >= 0;
  }

  function isNonNegativeInt(field) {
    return request.resource.data[field] is int &&
           request.resource.data[field] >= 0;
  }

  function isNumber(field) {
    return request.resource.data[field] is number;
  }

  function hasValidNumberFields() {
    return isNonNegativeNumber('balance') &&
           isNonNegativeNumber('totalWagered') &&
           isNonNegativeNumber('totalWon') &&
           isNonNegativeNumber('diceBestWin') &&
           isNonNegativeNumber('plinkoTotalWon') &&
           isNonNegativeNumber('plinkoBestWin') &&
           isNonNegativeInt('gamesPlayed') &&
           isNonNegativeInt('diceGamesPlayed') &&
           isNonNegativeInt('diceWins') &&
           isNonNegativeInt('diceLosses') &&
           isNonNegativeInt('plinkoGamesPlayed') &&
           isNonNegativeInt('blackjackHandsPlayed') &&
           isNonNegativeInt('blackjackWins') &&
           isNonNegativeInt('blackjackBlackjacks') &&
           isNumber('blackjackTotalProfit') &&
           isNonNegativeInt('minesGamesPlayed') &&
           isNonNegativeInt('minesCashouts') &&
           isNonNegativeNumber('minesBestMultiplier') &&
           isNumber('minesTotalProfit');
  }

  function hasValidCreateMetadata() {
    return (request.resource.data.email == null ||
            (request.resource.data.email is string &&
             (request.auth.token.email == null ||
              request.auth.token.email == request.resource.data.email))) &&
           request.resource.data.createdAt is string;
  }

  function isValidUserCreate() {
    return hasAllowedKeys() &&
           hasValidNumberFields() &&
           hasValidCreateMetadata();
  }

  function isValidUserUpdate() {
    return hasAllowedKeys() &&
           hasValidNumberFields() &&
           request.resource.data.email == resource.data.email &&
           request.resource.data.createdAt == resource.data.createdAt;
  }
}
